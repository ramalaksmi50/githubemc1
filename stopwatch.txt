"use client"

import { useState, useRef } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Play, Pause, RotateCcw, Clock } from "lucide-react"

export default function StopwatchApp() {
  const [time, setTime] = useState(0)
  const [isRunning, setIsRunning] = useState(false)
  const [lapTimes, setLapTimes] = useState<number[]>([])
  const intervalRef = useRef<NodeJS.Timeout | null>(null)
  const startTimeRef = useRef<number>(0)

  const formatTime = (milliseconds: number) => {
    const totalSeconds = Math.floor(milliseconds / 1000)
    const minutes = Math.floor(totalSeconds / 60)
    const seconds = totalSeconds % 60
    const ms = Math.floor((milliseconds % 1000) / 10)

    return `${minutes.toString().padStart(2, "0")}:${seconds.toString().padStart(2, "0")}.${ms.toString().padStart(2, "0")}`
  }

  const handleStart = () => {
    if (!isRunning) {
      setIsRunning(true)
      startTimeRef.current = Date.now() - time

      intervalRef.current = setInterval(() => {
        setTime(Date.now() - startTimeRef.current)
      }, 10)
    }
  }

  const handlePause = () => {
    if (isRunning && intervalRef.current) {
      setIsRunning(false)
      clearInterval(intervalRef.current)
      intervalRef.current = null
    }
  }

  const handleReset = () => {
    setIsRunning(false)
    setTime(0)
    setLapTimes([])
    if (intervalRef.current) {
      clearInterval(intervalRef.current)
      intervalRef.current = null
    }
  }

  const handleLap = () => {
    if (isRunning) {
      setLapTimes((prev) => [...prev, time])
    }
  }

  const getBestLap = () => {
    if (lapTimes.length === 0) return null
    return Math.min(...lapTimes)
  }

  const getWorstLap = () => {
    if (lapTimes.length === 0) return null
    return Math.max(...lapTimes)
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900 p-4">
      <div className="max-w-md mx-auto space-y-6">
        {/* Header */}
        <div className="text-center pt-8">
          <div className="flex items-center justify-center gap-2 mb-2">
            <Clock className="w-8 h-8 text-purple-400" />
            <h1 className="text-3xl font-bold text-white">Stopwatch</h1>
          </div>
          <p className="text-slate-400">Precision timing at your fingertips</p>
        </div>

        {/* Main Timer Display */}
        <Card className="bg-black/40 border-purple-500/30 backdrop-blur-sm">
          <CardContent className="p-8">
            <div className="text-center">
              <div className="text-6xl font-mono font-bold text-white mb-6 tracking-wider">{formatTime(time)}</div>

              {/* Control Buttons */}
              <div className="flex justify-center gap-4">
                {!isRunning ? (
                  <Button onClick={handleStart} size="lg" className="bg-green-600 hover:bg-green-700 text-white px-8">
                    <Play className="w-5 h-5 mr-2" />
                    Start
                  </Button>
                ) : (
                  <Button onClick={handlePause} size="lg" className="bg-orange-600 hover:bg-orange-700 text-white px-8">
                    <Pause className="w-5 h-5 mr-2" />
                    Pause
                  </Button>
                )}

                <Button
                  onClick={handleReset}
                  size="lg"
                  variant="outline"
                  className="bg-red-600/20 border-red-500 text-red-400 hover:bg-red-600 hover:text-white px-8"
                >
                  <RotateCcw className="w-5 h-5 mr-2" />
                  Reset
                </Button>
              </div>

              {/* Lap Button */}
              {isRunning && (
                <div className="mt-4">
                  <Button
                    onClick={handleLap}
                    variant="outline"
                    className="bg-purple-600/20 border-purple-500 text-purple-400 hover:bg-purple-600 hover:text-white"
                  >
                    Lap
                  </Button>
                </div>
              )}
            </div>
          </CardContent>
        </Card>

        {/* Lap Times */}
        {lapTimes.length > 0 && (
          <Card className="bg-black/40 border-purple-500/30 backdrop-blur-sm">
            <CardHeader>
              <CardTitle className="text-white text-center">Lap Times</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-2 max-h-64 overflow-y-auto">
                {lapTimes.map((lapTime, index) => {
                  const isLast = index === lapTimes.length - 1
                  const isBest = lapTime === getBestLap() && lapTimes.length > 1
                  const isWorst = lapTime === getWorstLap() && lapTimes.length > 1

                  return (
                    <div
                      key={index}
                      className={`flex justify-between items-center p-3 rounded-lg ${
                        isLast
                          ? "bg-purple-600/30 border border-purple-500/50"
                          : isBest
                            ? "bg-green-600/20 border border-green-500/50"
                            : isWorst
                              ? "bg-red-600/20 border border-red-500/50"
                              : "bg-slate-800/50"
                      }`}
                    >
                      <span
                        className={`font-semibold ${
                          isLast
                            ? "text-purple-300"
                            : isBest
                              ? "text-green-300"
                              : isWorst
                                ? "text-red-300"
                                : "text-slate-300"
                        }`}
                      >
                        Lap {index + 1}
                        {isBest && lapTimes.length > 1 && " üèÜ"}
                        {isWorst && lapTimes.length > 1 && " üêå"}
                      </span>
                      <span
                        className={`font-mono text-lg ${
                          isLast
                            ? "text-purple-200"
                            : isBest
                              ? "text-green-200"
                              : isWorst
                                ? "text-red-200"
                                : "text-slate-200"
                        }`}
                      >
                        {formatTime(lapTime)}
                      </span>
                    </div>
                  )
                })}
              </div>

              {/* Statistics */}
              {lapTimes.length > 1 && (
                <div className="mt-4 pt-4 border-t border-slate-700">
                  <div className="grid grid-cols-2 gap-4 text-sm">
                    <div className="text-center">
                      <div className="text-slate-400">Best Lap</div>
                      <div className="text-green-300 font-mono">{formatTime(getBestLap()!)}</div>
                    </div>
                    <div className="text-center">
                      <div className="text-slate-400">Worst Lap</div>
                      <div className="text-red-300 font-mono">{formatTime(getWorstLap()!)}</div>
                    </div>
                  </div>
                </div>
              )}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  )
}
